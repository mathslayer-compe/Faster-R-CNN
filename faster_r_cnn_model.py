# -*- coding: utf-8 -*-
"""Faster R-CNN Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ax_3l1U-TxlE-9p0ciNNYpn962jtuHjS
"""

import torch
import torchvision
import os
from PIL import Image
import matplotlib.pyplot as plt

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

device

from google.colab import drive
drive.mount('/content/drive')

dataset_path = '/content/drive/My Drive/Colab Notebooks/animals/animals'

os.listdir(dataset_path)

class WildlifeDataset(torch.utils.data.Dataset):
    def __init__(self, root_dir, transform=None):
        self.root_dir = root_dir
        self.transform = transform
        self.classes = os.listdir(root_dir)
        self.images = []

        for label, animal in enumerate(self.classes):
            animal_dir = os.path.join(root_dir, animal)
            for img_file in os.listdir(animal_dir):
                img_path = os.path.join(animal_dir, img_file)
                self.images.append((img_path, label))

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        img_path, label = self.images[idx]
        image = Image.open(img_path).convert("RGB")
        target = {
            "boxes": torch.tensor([[0, 0, image.width, image.height]], dtype=torch.float32),
            "labels": torch.tensor([label], dtype=torch.int64)
        }

        if self.transform:
            image = self.transform(image)

        return image, target

from torchvision import transforms
transform = transforms.Compose([
    transforms.ToTensor()
])
dataset = WildlifeDataset(
    root_dir=dataset_path,
    transform=transform
)
train_loader = torch.utils.data.DataLoader(
    dataset, batch_size=4, shuffle=True, collate_fn=lambda x: tuple(zip(*x))
)

images, targets = next(iter(train_loader))

for i in range(len(images)):
    plt.imshow(images[i].permute(1, 2, 0))
    label_idx = targets[i]['labels'].item()
    label = dataset.classes[label_idx]
    plt.title(f"Label: {label}")
    plt.show()

model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
num_classes = len(dataset.classes)+1
model.roi_heads.box_predictor = torchvision.models.detection.faster_rcnn.FastRCNNPredictor(model.roi_heads.box_predictor.cls_score.in_features, num_classes)
model.to('cuda')

optimizer = torch.optim.SGD(model.parameters(), lr=0.005, momentum=0.9, weight_decay=0.0005)
num_epochs = 10
model.train()


for epoch in range(num_epochs):
    epoch_loss = 0

    for images, targets in train_loader:
        # Move images and targets to the GPU
        images = list(image.to(device) for image in images)  
        targets = [{k: v.to(device) for k, v in t.items()} for t in targets] 

        optimizer.zero_grad()
        loss_dict = model(images, targets)
        losses = sum(loss for loss in loss_dict.values())
        losses.backward()
        optimizer.step()
        epoch_loss += losses.item()

    print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {epoch_loss/len(train_loader):.4f}")



import cv2
import matplotlib.pyplot as plt

model.eval()
test_img_path = r'/content/drive/My Drive/Colab Notebooks/animals/animals'
test_image = Image.open(test_img_path).convert("RGB")
test_tensor = transforms.ToTensor()(test_image).unsqueeze(0)
with torch.no_grad():
    predictions = model(test_tensor)
def draw_boxes(image, predictions, threshold=0.5):
    img = cv2.cvtColor(cv2.imread(test_img_path), cv2.COLOR_BGR2RGB)
    for i, box in enumerate(predictions[0]['boxes']):
        score = predictions[0]['scores'][i].item()
        if score > threshold:
            x1, y1, x2, y2 = box.int()
            label_idx = predictions[0]['labels'][i].item()
            label = dataset.classes[label_idx - 1]  
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(img, f'{label}: {score:.2f}', (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
    plt.imshow(img)
    plt.show()

draw_boxes(test_image, predictions)
